@2024-05-07
@19:51 Initial GestVM import
attempting to import just the things I need from mnolth.
@19:55 things build except for memops, uses lua
memops does not want to build because I think I added
some lua in there.

As a matter of fact, there's also LIL in there as well,
which shouldn't have built either. But, I realize that
LIL is included in the sndkit distro at the moment. I'll
leave it be for now, but it's going to be dead code in
Orphium.
@19:56 TODO revisit memops
memops I think is all the code responsible for getting
TAL code compiled down to uxn byte code. Right now it
won't compile cuz it relies on the Lua C API.

How hard will it be to remove Lua and get the functionality
we want?

In the long run, it'd be nice to use Konilo to metaprogram
Uxn byte code. Reason for this is it'd integrate better
with Konilo. Also, I think it would allow for more fly-by
one-off gestures. But this might end up being more
trouble than it is worth.

@2024-05-08
@15:34 Try to get core memops C API to compile
the memops stuff is mostly in C, with helper functions
in LIL and Lua. At the very least, I'm going to try and
get things to compile.

@15:42 Try to find good hello world example for gestvm
I need to find something that showcases a gesture path,
like a gesture controlling frequency. This will be something
I will eventually be able to write using Konilo forth.

@15:59 Work out Konilo Pseudo-code
I seem to have a "simple path" example in the gestlings
repo that I think I can turn into a Konilo program.
There's a lot I have to build out for it to actually
work, but I'm pretty sure I can imagine most of the
program structure.

@16:31 Pseudo-forth written in Unu. Next steps.
Unu is a helpful way to articulate my thoughts, and
since we have the retro-uno program why not.

Next steps will involve implementing all the words that
don't exist, which will include getting a working in-memory
Tal assembler working.

@2024-05-09
@19:42 Get an instance of GestVM inside ilo
Just want to see it get initialized.

@19:49 Okay that was easy, now to think about the memops
Here's what I'm finding:

There's a pretty simple struct called =gestvm_membuf=,
that's just char pointer with a size.

I wrote a routine that compiles a tal string to an
in-memory Uxn buffer called =uxnasm_compile= (which I
think is a part of uxnasm.c). I believe this allocates
a buffer internally and must be freed later.

It shouldn't be too difficult to use this to build a
single-pass Uxn compiler that generates a program once.
We're not doing realtime hotswapping yet, so this should
be good enough.

@20:02 set up orphium buffer for Tal
The idea will be to set up a decently sized Tal buffer
to copy a single Tal program to. Then, I'll need to
start working out what the msgpack protocol is going
to look like.

Note: the orph buffer is currently set to be 1024.
Will that be big enough? I'm already thinking about
adding I/O stuff to Uxn that would allow it to read from
Ilo block storage, which could help with some of the
space concerns.

@20:08 initial TAL placeholder for orph_parse_object()

@2024-05-10
@15:11 Implement tal objects
@15:48 do the final copy over
I've got everything working to the point where it compiles
the ROM. Now I just gotta copy it over properly.
---
Ah, this is a little bit trickier than I thought. I actually
need to hold on to the compiled ROM because it contains
the symbol table, stored inside a =gestvm_membuf=.
---
I can use =gestvm_load= for now using the membuf holder.
When gestlive starts happening, things might need to be
revamped. It's unclear to me how much new code I'll need
to write out, if any, since the old code was designed
around using LIL and Lua.
---
Wait. =gestvm_load= is a filepath, not the rom itself.
Going to need to rework things.

@16:04 TODO next steps
Make memops =load= a public function.

=compile_tal= needs to use memops =load= with a re-usable
=gestvm_membuf= storing the ROM and symbol table. Make
sure to free.

Then, start thinking about the gesture signal generator
nodes.

Then, start thinking about sound nodes needed for hello
world.

@2024-05-11
@14:40 Attempting to make memops load public function
Calling it =gestvm_load_mem=.
@14:43 Load rom using =gestvm_load_mem=.
@15:11 Implement symbol lookup
This takes in a symbol string, then gets a location.
Should be able to look up the current ROM symbol table.
@15:37 Sine hello world scaffolding
Bare minimum nodes. Will implement everything later.
@15:48 GSG and Phasor nodes
Phasor: no sweat.  GSG: how are we making this node again?
Gotta look it up.
---
=sk_node_gestvm=, which takes in an address pointer as
an arg.

Data I am passing in is a string, so we could do symbol
look up here, but I am committed to the idea of eventually
making anonymous path programs that can be made inline
with the patch. Plus, we have already got the symbol
lookup working already.
---
Ah, we're going to need to push the gestvm instance.
ilo.c is getting croweded. Eventually stuff we'll need
to get moved out of there.
---
=sk_node_gestvm= is bundled in with the LIL nodes. Well,
that's a little sloppy. I will need to separate them later.
@16:08 motf, add
@16:10 render to wav, see if there's sound
It works!
@16:16 Cleanup, bring in new words
@16:20 A better way to write core Orphium Konilo code
I wonder if I can do things imilar to extend.konilo
